{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the Colonia Segura application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user entity."
        },
        "name": {
          "type": "string",
          "description": "The user's full name."
        },
        "email": {
          "type": "string",
          "description": "The user's email address.",
          "format": "email"
        },
        "phone": {
          "type": "string",
          "description": "The user's phone number."
        },
        "coloniaId": {
          "type": "string",
          "description": "Reference to Colonia. (Relationship: Colonia 1:N User)"
        }
      },
      "required": [
        "id",
        "name",
        "email",
        "phone",
        "coloniaId"
      ]
    },
    "Colonia": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Colonia",
      "type": "object",
      "description": "Represents a neighborhood (colonia) within the application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the colonia entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the colonia."
        },
        "location": {
          "type": "string",
          "description": "The general location of the Colonia."
        }
      },
      "required": [
        "id",
        "name"
      ]
    },
    "SosAlert": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SosAlert",
      "type": "object",
      "description": "Represents an SOS alert sent by a user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the SOS alert entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N SosAlert) The user who sent the SOS alert."
        },
        "timestamp": {
          "type": "string",
          "description": "The date and time the SOS alert was sent.",
          "format": "date-time"
        },
        "location": {
          "type": "string",
          "description": "The location of the user when the SOS alert was sent (e.g., latitude, longitude)."
        },
        "message": {
          "type": "string",
          "description": "The text message accompanying the SOS alert."
        },
        "audioId": {
          "type": "string",
          "description": "Reference to Audio. (Relationship: Audio 1:1 SosAlert).  The ID of the associated audio recording (if any)."
        },
        "photoId": {
          "type": "string",
          "description": "Reference to Photo. (Relationship: Photo 1:1 SosAlert). The ID of the associated photo (if any)."
        }
      },
      "required": [
        "id",
        "userId",
        "timestamp",
        "location"
      ]
    },
    "ChatMessage": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ChatMessage",
      "type": "object",
      "description": "Represents a chat message within the colonia chat.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the chat message entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N ChatMessage) The user who sent the chat message."
        },
        "coloniaId": {
          "type": "string",
          "description": "Reference to Colonia. (Relationship: Colonia 1:N ChatMessage) The colonia to which the chat message belongs."
        },
        "timestamp": {
          "type": "string",
          "description": "The date and time the chat message was sent.",
          "format": "date-time"
        },
        "message": {
          "type": "string",
          "description": "The text of the chat message."
        }
      },
      "required": [
        "id",
        "userId",
        "coloniaId",
        "timestamp",
        "message"
      ]
    },
    "Audio": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Audio",
      "type": "object",
      "description": "Represents an audio recording associated with an SOS alert.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the audio entity."
        },
        "fileUrl": {
          "type": "string",
          "description": "The URL where the audio file is stored."
        },
        "duration": {
          "type": "number",
          "description": "The duration of the audio recording in seconds."
        }
      },
      "required": [
        "id",
        "fileUrl",
        "duration"
      ]
    },
    "Photo": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Photo",
      "type": "object",
      "description": "Represents a photo associated with an SOS alert.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the photo entity."
        },
        "fileUrl": {
          "type": "string",
          "description": "The URL where the photo file is stored."
        },
        "description": {
          "type": "string",
          "description": "A description of the photo."
        }
      },
      "required": [
        "id",
        "fileUrl"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profile information.  Path-based ownership for user data.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
      {
        "path": "/colonias/{coloniaId}",
        "definition": {
          "entityName": "Colonia",
          "schema": {
            "$ref": "#/backend/entities/Colonia"
          },
          "description": "Stores information about each colonia (neighborhood).",
          "params": [
            {
              "name": "coloniaId",
              "description": "The unique identifier of the colonia."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/sos_alerts/{sosAlertId}",
        "definition": {
          "entityName": "SosAlert",
          "schema": {
            "$ref": "#/backend/entities/SosAlert"
          },
          "description": "Stores SOS alerts sent by users. Located under the user document to simplify ownership-based security rules. Path-based ownership.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user who sent the alert."
            },
            {
              "name": "sosAlertId",
              "description": "The unique identifier of the SOS alert."
            }
          ]
        }
      },
      {
        "path": "/colonias/{coloniaId}/chat_messages/{chatMessageId}",
        "definition": {
          "entityName": "ChatMessage",
          "schema": {
            "$ref": "#/backend/entities/ChatMessage"
          },
          "description": "Stores chat messages within each colonia. Includes denormalized 'coloniaId' to avoid authorization `get()` calls.",
          "params": [
            {
              "name": "coloniaId",
              "description": "The unique identifier of the colonia."
            },
            {
              "name": "chatMessageId",
              "description": "The unique identifier of the chat message."
            }
          ]
        }
      },
      {
        "path": "/audio/{audioId}",
        "definition": {
          "entityName": "Audio",
          "schema": {
            "$ref": "#/backend/entities/Audio"
          },
          "description": "Stores audio recordings associated with SOS alerts.  This is a top-level collection as its existence is tied to a SOS alert, not a specific user.",
          "params": [
            {
              "name": "audioId",
              "description": "The unique identifier of the audio recording."
            }
          ]
        }
      },
      {
        "path": "/photos/{photoId}",
        "definition": {
          "entityName": "Photo",
          "schema": {
            "$ref": "#/backend/entities/Photo"
          },
          "description": "Stores photos associated with SOS alerts. This is a top-level collection as its existence is tied to a SOS alert, not a specific user.",
          "params": [
            {
              "name": "photoId",
              "description": "The unique identifier of the photo."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore data structure is designed to support the core features of the Colonia Segura application, focusing on neighborhood communication, emergency alerts, and location sharing. The structure prioritizes authorization independence, clarity, and scalability.  \n\nAuthorization Independence is achieved through denormalization. For example, ChatMessage documents include the `coloniaId`, even though a user also has a `coloniaId`. This avoids needing to `get()` the User document in security rules to determine the user's colonia.  Similarly, the `SosAlert` includes `userId` for direct association.  \n\nQAPs (Rules are not Filters) are supported by structural segregation. User-specific data (like SOS alerts) are stored under the `/users/{userId}` path. This allows listing all alerts for a specific user without needing to filter based on content. The `coloniaId` in `ChatMessage` supports listing messages within a specific colonia.\n\nThe structure uses path-based ownership for user-generated content (SOS alerts) and membership maps are not needed, simplifying access control. Existence-based global roles (e.g., `/roles_admin/{uid}`) are not needed at this time, but can be added later to support administrative functions.\n\nExplicit state modeling is used implicitly by requiring the audio, video, or message. Schema predictability is maintained by avoiding dynamic keys and enforcing consistent naming conventions (e.g., `userId`, `coloniaId`)."
  }
}