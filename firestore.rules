/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes a flexible data structure for prototyping while enforcing strict access control.
 * User data is generally private and writable only by the user.
 * SOS alerts are public and writable by any authenticated user.
 * Surveillance zones are public read-only, but writes are not secured and require developer attention.
 *
 * Data Structure:
 * - /users/{userId}: User profile data.
 * - /sos-alerts/{alertId}: SOS alert messages.
 * - /surveillance-zones/{zoneId}: Neighborhood watch zone boundaries.
 *
 * Key Security Decisions:
 * - Listing of users is disallowed.
 * - Public read access is granted for SOS alerts.
 * - The rules do NOT validate the data format of timestamps.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile data, allowing only the user to read/write their own profile.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their profile.
     * @allow (get, update, delete) - Authenticated user with ID 'user123' reads their own profile.
     * @deny (create) - Authenticated user tries to create a profile with a different ID.
     * @deny (get, update, delete) - Authenticated user tries to read another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows any authenticated user to read SOS alerts. Allows any authenticated user to create SOS alerts.
     * @path /sos-alerts/{alertId}
     * @allow (get, list) - Any authenticated user can read any alert.
     * @allow (create) - Authenticated user creates an alert.
     * @deny (update, delete) - No rule is configured that permits update or delete, so they are always denied.
     * @principle Public read access with authenticated-user-only writes.
     */
    match /sos-alerts/{alertId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows any user to read surveillance zone data.  Write rules are missing.
     * @path /surveillance-zones/{zoneId}
     * @allow (get, list) - Any user can read any surveillance zone.
     * @deny (create, update, delete) - No rule is configured that permits create, update, or delete, so they are always denied.
     * @principle Public read access; owner-only writes are not yet implemented.
     */
    match /surveillance-zones/{zoneId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}