/**
 * @fileoverview Firestore Security Rules for the Colonia Segura application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data while allowing public read access to community-related content.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}` and are only accessible to the respective user.
 * - SOS alerts are stored under `/users/{userId}/sos_alerts/{sosAlertId}` and are also user-owned.
 * - Colonia information is stored under `/colonias/{coloniaId}` and is publicly readable.
 * - Chat messages are stored under `/colonias/{coloniaId}/chat_messages/{chatMessageId}` and are publicly readable.
 * - Audio and Photo records are stored at the top-level under `/audio/{audioId}` and `/photos/{photoId}`.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Public read access is granted to colonia information and chat messages to facilitate community interaction.
 * - All write operations are protected by authorization checks based on user identity and document ownership.
 * - No data shape validation is performed in this prototyping phase, with the exception of relational integrity constraints.
 *
 * Denormalization for Authorization:
 * - Chat messages include the `coloniaId` to avoid requiring `get()` calls to the Colonia document for authorization.
 * - SOS alerts are stored as subcollections of users to enable easy, ownership-based access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profile data. Only the user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) User with ID 'user_abc' can create their profile.
     *       request.auth.uid == 'user_abc' and request.resource.data.id == 'user_abc'
     * @allow (get, update, delete) User with ID 'user_abc' can read/update/delete their profile.
     *       request.auth.uid == 'user_abc' and resource.data.id == 'user_abc'
     * @deny  (create) User with ID 'user_abc' cannot create profile with a different ID.
     *       request.auth.uid == 'user_abc' but request.resource.data.id == 'user_def'
     * @deny  (get, update, delete) User with ID 'user_abc' cannot read/update/delete profile of another user.
     *       request.auth.uid == 'user_def' and resource.data.id == 'user_abc'
     * @principle Enforces document ownership for writes; restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secure colonia data. Anyone can read colonia data, but only the application can create, update, or delete it.
     * @path /colonias/{coloniaId}
     * @allow (get, list) Any user can read colonia data.
     * @deny (create, update, delete) No user can create, update, or delete colonia data.
     * @principle Public read access with restricted write access.
     */
    match /colonias/{coloniaId} {
      allow get, list: if true;
      allow create, update, delete: if false; // Only the application can modify colonia data.
    }

    /**
     * @description Secure SOS alert data. Only the owner user can read/write their own SOS alerts.
     * @path /users/{userId}/sos_alerts/{sosAlertId}
     * @allow (create) User with ID 'user_abc' can create an SOS alert.
     *       request.auth.uid == 'user_abc'
     * @allow (get, update, delete) User with ID 'user_abc' can read/update/delete their SOS alert.
     *       request.auth.uid == 'user_abc'
     * @deny  (create) User with ID 'user_abc' cannot create an SOS alert for another user.
     *       request.auth.uid == 'user_def'
     * @deny  (get, update, delete) User with ID 'user_abc' cannot read/update/delete SOS alert of another user.
     *       request.auth.uid == 'user_def'
     * @principle Enforces document ownership for writes; restricts access to a user's own data tree.
     */
    match /users/{userId}/sos_alerts/{sosAlertId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secure chat message data. Anyone can read chat messages, but only authenticated users can create them.  No updates or deletes allowed.
     * @path /colonias/{coloniaId}/chat_messages/{chatMessageId}
     * @allow (get, list) Any user can read chat messages.
     * @allow (create) User can create chat message.  Validates that the coloniaId is correct.
     *       request.auth.uid != null and request.resource.data.coloniaId == coloniaId
     * @deny (update, delete) No user can update/delete chat messages.
     * @principle Public read access with authenticated-user-only writes. Enforces coloniaId consistency.
     */
    match /colonias/{coloniaId}/chat_messages/{chatMessageId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.coloniaId == coloniaId;
      allow update, delete: if false;
    }

    /**
     * @description Secure audio data. Only authenticated users can create audio data.
     * @path /audio/{audioId}
     * @allow (get, list) Any user can read audio data.
     * @allow (create) User can create audio data.
     * @deny (update, delete) No user can update/delete audio data.
     * @principle Public read access with authenticated-user-only writes.
     */
    match /audio/{audioId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Secure photo data. Only authenticated users can create photo data.
     * @path /photos/{photoId}
     * @allow (get, list) Any user can read photo data.
     * @allow (create) User can create photo data.
     * @deny (update, delete) No user can update/delete photo data.
     * @principle Public read access with authenticated-user-only writes.
     */
    match /photos/{photoId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId);
    }

    function isNewOwner(userId) {
      return request.auth.uid == userId;
    }

    function isUserIdNotChanged(userId) {
        return request.resource.data.id == resource.data.id;
    }
  }
}