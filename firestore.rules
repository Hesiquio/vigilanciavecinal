/**
 * @file Firestore Security Rules for Colonia Segura Application
 *
 * @core_philosophy This ruleset enforces a combination of public read access for colonia information and strict user-ownership for personal data (profiles, SOS alerts, geofences, alerts).
 *   Authorization independence is achieved by denormalizing the 'coloniaId' in chat messages and SOS alerts. This eliminates the need for `get()` calls to verify a user's colonia membership.
 *
 * @data_structure
 *   - /colonias/{coloniaId}: Publicly readable collection of colonia information.
 *   - /users/{userId}: Collection of user profiles, accessible only by the owning user.
 *   - /colonias/{coloniaId}/chat_messages/{messageId}: Collection of chat messages within a colonia.
 *   - /users/{userId}/sos_alerts/{alertId}: Collection of SOS alerts created by a user.
 *   - /users/{userId}/geofences/{geofenceId}: Collection of geofences defined by a user.
 *   - /users/{userId}/alerts/{alertId}: Collection of alerts triggered by a user's geofences.
 *
 * @key_security_decisions
 *   - Public read access for /colonias/{coloniaId} is enabled to facilitate the "Emergency Group Assignment" feature.
 *   - User listing is implicitly denied by not providing list permissions on the /users collection.
 *   - All user-owned data under /users/{userId} is strictly controlled by the owning user.
 *   - The rules prioritize authorization and relational integrity validation over comprehensive data schema validation for rapid prototyping.
 *
 * @denormalization_for_authorization
 *   - 'coloniaId' is denormalized in ChatMessage and SosAlert documents to avoid costly `get()` calls to the user document for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to colonia information, with owner-only writes (not yet implemented due to missing schema field).
     * @path /colonias/{coloniaId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Enables public access for colonia discovery while restricting unauthorized modifications.
     */
    match /colonias/{coloniaId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow get: if isOwner(userId);
     * @allow list: if false;
     * @allow create: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @allow (create): if request.auth.uid == userId;
     * @allow (get): if request.auth.uid == userId;
     * @allow (update): if request.auth.uid == userId;
     * @allow (delete): if request.auth.uid == userId;
     * @deny get: if request.auth.uid != userId;
     * @deny create: if request.auth.uid != userId;
     * @deny update: if request.auth.uid != userId;
     * @deny delete: if request.auth.uid != userId;
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to read, create, update, and delete chat messages within their colonia.
     * @path /colonias/{coloniaId}/chat_messages/{messageId}
     * @allow get, list: if true; // Allowing public read access to chat messages
     * @allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid && request.resource.data.coloniaId == coloniaId;
     * @allow update: if isSignedIn() && resource != null && request.resource.data.userId == request.auth.uid && request.resource.data.coloniaId == coloniaId;
     * @allow delete: if isSignedIn() && resource != null && request.resource.data.userId == request.auth.uid && request.resource.data.coloniaId == coloniaId;
     * @principle Enforces colonia-based access control for chat messages.
     */
    match /colonias/{coloniaId}/chat_messages/{messageId} {
      allow get, list: if true; // Allowing public read access to chat messages
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid && request.resource.data.coloniaId == coloniaId;
      allow update: if isSignedIn() && resource != null && request.resource.data.userId == request.auth.uid && request.resource.data.coloniaId == coloniaId;
      allow delete: if isSignedIn() && resource != null && request.resource.data.userId == request.auth.uid && request.resource.data.coloniaId == coloniaId;
    }

    /**
     * @description Enforces user-ownership for SOS alerts.
     * @path /users/{userId}/sos_alerts/{alertId}
     * @allow get: if isOwner(userId);
     * @allow list: if isOwner(userId);
     * @allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
     * @allow update: if isExistingOwner(userId) && request.resource.data.userId == request.auth.uid;
     * @allow delete: if isExistingOwner(userId) && request.resource.data.userId == request.auth.uid;
     * @principle Restricts access to a user's own SOS alerts.
     */
    match /users/{userId}/sos_alerts/{alertId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow delete: if isExistingOwner(userId) && request.resource.data.userId == request.auth.uid;
    }

    /**
     * @description Enforces user-ownership for geofences.
     * @path /users/{userId}/geofences/{geofenceId}
     * @allow get: if isOwner(userId);
     * @allow list: if isOwner(userId);
     * @allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
     * @allow update: if isExistingOwner(userId) && request.resource.data.userId == request.auth.uid;
     * @allow delete: if isExistingOwner(userId) && request.resource.data.userId == request.auth.uid;
     * @principle Restricts access to a user's own geofences.
     */
    match /users/{userId}/geofences/{geofenceId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow delete: if isExistingOwner(userId) && request.resource.data.userId == request.auth.uid;
    }

    /**
     * @description Enforces user-ownership for alerts.
     * @path /users/{userId}/alerts/{alertId}
     * @allow get: if isOwner(userId);
     * @allow list: if isOwner(userId);
     * @allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
     * @allow update: if isExistingOwner(userId) && request.resource.data.userId == request.auth.uid;
     * @allow delete: if isExistingOwner(userId) && request.resource.data.userId == request.auth.uid;
     * @principle Restricts access to a user's own alerts.
     */
    match /users/{userId}/alerts/{alertId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow delete: if isExistingOwner(userId) && request.resource.data.userId == request.auth.uid;
    }

    // ---- Helper functions ----

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the document.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the requesting user is the owner of the document and the document exists.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {bool} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}